substitutions:
  _SERVICE_NAME: migration
steps:

# start db
- name: 'postgres:13.3-alpine'
  id: run-db
  env:
    - POSTGRES_DB=test
    - POSTGRES_USER=postgres
    - POSTGRES_HOST_AUTH_METHOD=trust
  waitFor: ['-']

# compile
- name: 'gcr.io/cloud-builders/go'
  id: build
  args: ['build', '-o', 'app', './cmd/$_SERVICE_NAME']
  waitFor: ['-']

# test
- name: 'gcr.io/cloud-builders/go'
  id: run-tests
  args: ['test', './...']
  waitFor: ['-']
  env:
    - DB_USER=postgres
    - DB_DATABASE=test
    - DB_HOST=step_0
    - DB_PASSWORD=''
    - MIGRATION_DIR=/workspace/gopath/src/github.com/webdevelop-pro/migration/migrations

# security check
- name: 'golang:alpine'
  id: run-security-check
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      export GOPATH=`go env GOPATH`
      mkdir -p $$GOPATH/src/$$PROJECT_ROOT
      cp -rp /workspace/* $$GOPATH/src/$$PROJECT_ROOT/
      cd $$GOPATH/src/$$PROJECT_ROOT
      wget -O - -q https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s latest
      GO111MODULE=off ./bin/gosec ./...
  waitFor: ['-']

- name: 'gcr.io/cloud-builders/docker'
  id: stop-db
  args: ['container', 'stop', 'step_0']
  waitFor:
    - run-tests

# build docker image
- name: 'gcr.io/cloud-builders/docker'
  id: build-docker
  waitFor:
    - build
    - run-tests
    - run-security-check
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      if [ "$BRANCH_NAME" = "master" -o "$BRANCH_NAME" = "dev" ]; then
        docker build -t 'gcr.io/$PROJECT_ID/$_SERVICE_NAME:$COMMIT_SHA' -t 'gcr.io/$PROJECT_ID/$_SERVICE_NAME:latest' .
        docker push 'gcr.io/$PROJECT_ID/$_SERVICE_NAME:$COMMIT_SHA'
        docker push 'gcr.io/$PROJECT_ID/$_SERVICE_NAME:latest'
      elif [ "$BRANCH_NAME" = "stage" ]; then
        docker build -t 'gcr.io/$PROJECT_ID/$_SERVICE_NAME-stage:$COMMIT_SHA' -t 'gcr.io/$PROJECT_ID/$_SERVICE_NAME-stage:latest' .
        docker push 'gcr.io/$PROJECT_ID/$_SERVICE_NAME-stage:$COMMIT_SHA'
        docker push 'gcr.io/$PROJECT_ID/$_SERVICE_NAME-stage:latest'
      else
        echo "Not building on branch $BRANCH_NAME"
      fi

# deploy
- name: 'gcr.io/cloud-builders/gke-deploy'
  id: deploy
  waitFor:
    - build-docker
  entrypoint: 'sh'
  args:
      - '-c'
      - |
        if [ "$BRANCH_NAME" = "master" ]; then
          if [ "$PROJECT_ID" != "acretrader-live" ]; then exit; fi
          gcloud --quiet container clusters get-credentials --region us-central1 master
        elif [ "$BRANCH_NAME" = "dev" -o "$BRANCH_NAME" = "stage" ]; then
          gcloud --quiet container clusters get-credentials --region us-central1 dev2
        else
          echo "Not deploying on branch $BRANCH_NAME"
          exit;
        fi
        if [ "$BRANCH_NAME" = "stage" ]; then
          SVC=$_SERVICE_NAME-stage
        else
          SVC=$_SERVICE_NAME
        fi
        LATEST=$BRANCH_NAME-latest

        kubectl get deployment/$$SVC -o yaml | gke-deploy run -f - -i gcr.io/$PROJECT_ID/$$SVC:$COMMIT_SHA -a $$SVC

        # we need latest build for tests
        kubectl get deployment/$$SVC -o yaml | gke-deploy run -f - -i gcr.io/$PROJECT_ID/$$SVC:$LATEST -a $$SVC
